// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PokEmuBasic.Infrastructure.Database;

#nullable disable

namespace PokEmuBasic.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PokEmuBasic.Domain.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CardImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("card_image");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("card_name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("IndexNumber")
                        .HasColumnType("integer")
                        .HasColumnName("index_number");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("RarityId")
                        .HasColumnType("integer")
                        .HasColumnName("rarity_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id")
                        .HasName("pk_cards");

                    b.HasIndex("RarityId")
                        .HasDatabaseName("ix_cards_rarity_id");

                    b.ToTable("cards", (string)null);
                });

            modelBuilder.Entity("PokEmuBasic.Domain.Entities.Pack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("card_quantity");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("PackImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("pack_image");

                    b.Property<string>("PackName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("pack_name");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id")
                        .HasName("pk_packs");

                    b.ToTable("packs", (string)null);
                });

            modelBuilder.Entity("PokEmuBasic.Domain.Entities.PackRarityDropRate", b =>
                {
                    b.Property<int>("PackId")
                        .HasColumnType("integer")
                        .HasColumnName("pack_id");

                    b.Property<int>("RarityId")
                        .HasColumnType("integer")
                        .HasColumnName("rarity_id");

                    b.Property<decimal>("DropRate")
                        .HasColumnType("numeric")
                        .HasColumnName("drop_rate");

                    b.HasKey("PackId", "RarityId")
                        .HasName("pk_pack_rarity_drop_rates");

                    b.HasIndex("RarityId")
                        .HasDatabaseName("ix_pack_rarity_drop_rates_rarity_id");

                    b.ToTable("pack_rarity_drop_rates", (string)null);
                });

            modelBuilder.Entity("PokEmuBasic.Domain.Entities.Rarity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("RarityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("rarity_name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id")
                        .HasName("pk_rarities");

                    b.ToTable("rarities", (string)null);
                });

            modelBuilder.Entity("PokEmuBasic.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("avatar");

                    b.Property<int>("CoinBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("coin_balance");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("hashed_password");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PokEmuBasic.Domain.Entities.UserCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcquiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("acquired_at");

                    b.Property<int>("CardId")
                        .HasColumnType("integer")
                        .HasColumnName("card_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_cards");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_user_cards_card_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_cards_user_id");

                    b.ToTable("user_cards", (string)null);
                });

            modelBuilder.Entity("PokEmuBasic.Domain.Entities.Card", b =>
                {
                    b.HasOne("PokEmuBasic.Domain.Entities.Rarity", "Rarity")
                        .WithMany("Cards")
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cards_rarities_rarity_id");

                    b.Navigation("Rarity");
                });

            modelBuilder.Entity("PokEmuBasic.Domain.Entities.PackRarityDropRate", b =>
                {
                    b.HasOne("PokEmuBasic.Domain.Entities.Pack", "Pack")
                        .WithMany("PackRarityDropRates")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pack_rarity_drop_rates_packs_pack_id");

                    b.HasOne("PokEmuBasic.Domain.Entities.Rarity", "Rarity")
                        .WithMany("PackRarityDropRates")
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_pack_rarity_drop_rates_rarities_rarity_id");

                    b.Navigation("Pack");

                    b.Navigation("Rarity");
                });

            modelBuilder.Entity("PokEmuBasic.Domain.Entities.UserCard", b =>
                {
                    b.HasOne("PokEmuBasic.Domain.Entities.Card", "Card")
                        .WithMany("UserCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_cards_cards_card_id");

                    b.HasOne("PokEmuBasic.Domain.Entities.User", "User")
                        .WithMany("UserCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_cards_users_user_id");

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PokEmuBasic.Domain.Entities.Card", b =>
                {
                    b.Navigation("UserCards");
                });

            modelBuilder.Entity("PokEmuBasic.Domain.Entities.Pack", b =>
                {
                    b.Navigation("PackRarityDropRates");
                });

            modelBuilder.Entity("PokEmuBasic.Domain.Entities.Rarity", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("PackRarityDropRates");
                });

            modelBuilder.Entity("PokEmuBasic.Domain.Entities.User", b =>
                {
                    b.Navigation("UserCards");
                });
#pragma warning restore 612, 618
        }
    }
}
